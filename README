=dependencies

ocaml 3.12 / check that type value = long in the include header caml/mlvalues.h (compiled with -fPIC for amd-64)
ocamlfind
zarith library >=1.4
python 2.7
pdflatex for documentation
pytest for tests
ocamldoc for the ocaml documentation generation
python2-sphinx for the python documentation generation
menhir for the configuration parsing in ocaml
the library ocamlgraph
IDA for the vizualisation
Graphviz

on Debian Sid :
apt install ocaml menhir ocaml-findlib libzarith-ocaml-dev libocamlgraph-ocaml-dev

=installation

1. unzip this archive and enter it
2. compilation
make
3. installation
make install
4. for the documentation (generated in directory doc)
make doc

=ocaml compilation
If messages indicating that the -fPIC must be used used:
/usr/bin/ld: /usr/local/lib/ocaml/libasmrun.a(fail.o): réadressage de R_X86_64_32 en vertu de « caml_exn_Failure » ne peut être utilisé lors de la création d'un objet partagé; recompilez avec -fPIC
/usr/local/lib/ocaml/libasmrun.a: error adding symbols: Mauvaise valeur
collect2: error: ld returned 1 exit status
File "caml_startup", line 1:
Error: Error during linking
make[1]: *** [libbincat.so] Erreur 2

Then ocaml must be recompiled. Ocaml v4.02.3's INSTALL file indicates that this bug has been fixed - but it still does not work.

Use hardening-wrapper to recompile ocaml (a package is available in debian,
ubuntu, archlinux...) to make sure this options is passed when ocaml gets
compiled. The method proposed in the INSTALL file (./configure parameters) are
not sufficient.

=important remark
be sure to have the directory src/bincat into your LD_LIBRARY_PATH variable

=ocaml headers
OCAML headers are not installed in /usr/include or /usr/local/include, where
gcc looks for them, when installing from source.

Two solutions may be applied when compiling the Python using python2 setup.py build:
* Create a symlink (/usr/include/caml -> /usr/lib/ocaml/caml/, or
  /usr/local/include/caml -> /usr/local/lib/ocaml/caml/). This seems to be done
  in the debian packages.
* export C_INCLUDE_PATH=/usr/lib/ocaml

=mac os installation
by default non initialized external symobols are not exported by ranlib.
Hence some symbols in _caml_table are not exported which resul in a link failure.
To avoid this, type
ranlib -c /path/to/the/lib/libsasmrun.a

=ida plugin installation

* Copy or create a symlink to python/idabincat/idabincat.py in your IDA
  installation folder's plugin/ directory, or in your ~/.idapro/plugins
  directory

* Make the pybincat package available in your idapython distribution. To do so,
  you may copy or create a symlink to the python/pybincat/ folder in your IDA
  installation folder's plugin/ directory, or in your ~/.idapro/plugins
  directory.

* Make sure the "bincat" command is in your path (make install should have
  taken care of that)

=ida plugin usage

* Load the plugin by using the Ctrl-Shift-B shortcut, or using the
  "Edit -> Plugins -> BinCAT" menu

* Select an instruction in any IDA view, then use the Ctrl-Shift-A shortcut, or
  the "BinCAT -> Analyze from here" context menu
