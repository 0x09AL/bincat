(** log facilities *)

(** fid of the log file *)
let logfid = ref stdout

(** open the given log file *)
let init fname =
  logfid := open_out fname

(** dump a message provided by the analysis step *)
let from_analysis msg = Printf.fprintf (!logfid) "[analysis] %s\n" msg; flush !logfid

(** dump a message produced by the decoding step *)
let from_decoder msg = Printf.fprintf (!logfid) "[decoding] %s\n" msg; flush !logfid
						   
(** dump a message generated by then configuration parsing step *)
let from_config msg = Printf.fprintf !logfid "[config] %s\n" msg; flush !logfid

(** dump the string on the log file *)
let stdout_buf = ref ""
let open_stdout () = stdout_buf := ""
let print msg = stdout_buf := !stdout_buf ^ msg
let dump_stdout () = Printf.fprintf !logfid "%s\n" !stdout_buf; flush !logfid
    
(** dump debug message *)
let debug_lvl msg lvl =
    if !Config.verbose >= lvl then
        Printf.fprintf !logfid "[debug%d] %s\n" lvl msg; flush !logfid

let debug msg = debug_lvl msg 3
								   
(** close the log file *)
let close () = close_out !logfid

let error msg =
  Printexc.print_raw_backtrace !logfid (Printexc.get_callstack 100);
  Printf.fprintf !logfid "fatal error: %s\n" msg;
  flush !logfid;
  flush stdout;
  raise (Exceptions.Error msg)

